@using ClassLibrary
@using Raft
@rendermode InteractiveServer
@page "/"

<PageTitle>Home</PageTitle>

<h1>Raft Simulation</h1>

Welcome to your new app.


<button class="btn btn-primary" @onclick=startSimulation>Start Simulation</button>

<div class="row">
    <div>
        <label for="speed">
            Election timeout between @(FormatMilliSeconds(150 * NodeIntervalScalar)) and @(FormatMilliSeconds(300 *
            NodeIntervalScalar)) seconds
            <br>
            <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
                   @bind=NodeIntervalScalar @onchange="UpdateNodes" />
        </label>

    </div>
    <div>

        <label for="NetworkRequestDelay">
            Network Delay @FormatMilliSeconds(NetworkRequestDelay) seconds
            <br>
            <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
                   @bind:event="oninput" @bind=NetworkRequestDelay @onchange="UpdateNodes" />
        </label>
    </div>

    <div class="border p-3 rounded-3">
        <label>
            Value <input class="form-control" @bind=userInputValue />
        </label>
        <hr>
        @foreach (var node in Nodes)
        {
            <button class="btn btn-outline-primary mx-1" @onclick="() => SendCommand(node.Id)">Send to Node @node.Id</button>
        }
        <br>
        <div>
            @commandStatus
        </div>
    </div>

    @foreach (var node in Nodes)
    {
        var elapsedTime = DateTime.Now - node.InnerNode.StartTime;
        var timeoutDuration = node.InnerNode.Timer.Interval;
        var remainingTime = timeoutDuration - elapsedTime.TotalMilliseconds;
        var percentageRemaining = Math.Max(0, (int)(100 * remainingTime / timeoutDuration));

        <div class="p-3 col-4">
            <div class="border p-3 rounded-3">
                <div class="d-flex justify-content-between">
                    <h3>
                        Node @node.Id
                    </h3>
                    <div>
                        @if (!node.Paused)
                        {
                            <button class="btn btn-danger" @onclick="() => {node.Pause();}">
                                Stop
                            </button>
                        }
                        @if (node.Paused)
                        {
                            <button class="btn btn-success" @onclick="() => {node.UnPause();}">
                                Start
                            </button>
                        }
                    </div>
                </div>
                <div>
                    @node.InnerNode.State
                </div>
                <div>
                    Term @node.InnerNode.Term
                </div>
                <div>
                    Leader is @node.InnerNode.LeaderId
                </div>
                <div>
                    Commit Index is @node.InnerNode.NextIndex
                </div>
                <div>
                    @foreach (var log in node.InnerNode.logs)
                    {
                        <p> Current Term: @log.Term</p>
                        <p> Current Command: @log.Command</p>
                    }
                </div>
                <div>
                    <div class="progress" role="progressbar" aria-label="Timeout Progress"
                         aria-valuenow=@remainingTime aria-valuemin="0" aria-valuemax=@timeoutDuration>
                        <div class="progress-bar bg-dark-subtle" style="width: @percentageRemaining%;"></div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Timer? timer;
    public int NodeIntervalScalar = 1;
    public int NetworkRequestDelay = 0;
    string userInputValue = "";
    string commandStatus = "";


    List<SimulationNode> Nodes = new();

    void startSimulation()
    {
        var node1 = new Node([], 1, new Client());
        var node2 = new Node([], 2, new Client());
        var node3 = new Node([], 3, new Client());


        var simulation1 = new SimulationNode(node1);
        var simulation2 = new SimulationNode(node2);
        var simulation3 = new SimulationNode(node3);


        node1.OtherNodes = [simulation2, simulation3];
        node2.OtherNodes = [simulation1, simulation3];
        node3.OtherNodes = [simulation1, simulation2];

        Nodes = [simulation1, simulation2, simulation3];

        timer = new Timer(_ =>
        {
            InvokeAsync(StateHasChanged);
        }, null, 0, 200);
    }

    public static string FormatTimeSpan(TimeSpan timeSpan)
    {
        double totalSeconds = timeSpan.TotalSeconds;
        return $"{totalSeconds:F1}";
    }

    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }

    public void UpdateNodes()
    {
        foreach (var node in Nodes)
        {
            node.InnerNode.LeaderDelay = NetworkRequestDelay;
            node.InnerNode.MinDelay = 150 * NodeIntervalScalar;
            node.InnerNode.MaxDelay = 300 * NodeIntervalScalar;
        }
    }

    public void SendCommand(int destinationId)
    {
        commandStatus = "sending";
        var dest = Nodes.FirstOrDefault(n => n.Id == destinationId);

        if (dest is null)
        {
            return;
        }

        var value = userInputValue;

        dest.RecieveClientCommand(value);
        commandStatus = $"sent to node {destinationId}";
    }

}
